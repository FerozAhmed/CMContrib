// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace CMContrib.Spec.Rescue
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calling a rescue coroutine when results complete with an error")]
    public partial class CallingARescueCoroutineWhenResultsCompleteWithAnErrorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RescueCoroutine.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calling a rescue coroutine when results complete with an error", "As a programmer\r\nIn order to handle errors in completed results efficiently\r\nI wa" +
                    "nt to execute a coroutine as a rescue", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The rescue coroutine is not invoked when the result completes normal")]
        public virtual void TheRescueCoroutineIsNotInvokedWhenTheResultCompletesNormal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rescue coroutine is not invoked when the result completes normal", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("an arbitrary result which completes normal");
#line 8
  testRunner.And("I want to rescue all errors with a coroutine");
#line 9
 testRunner.When("the result is executed");
#line 10
 testRunner.Then("the rescue coroutine is not invoked");
#line 11
  testRunner.And("the result does not get cancelled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The rescue coroutine is not invoked when the result is cancelled")]
        public virtual void TheRescueCoroutineIsNotInvokedWhenTheResultIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rescue coroutine is not invoked when the result is cancelled", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("an arbitrary result which gets cancelled");
#line 15
  testRunner.And("I want to rescue all errors with a coroutine");
#line 16
 testRunner.When("the result is executed");
#line 17
 testRunner.Then("the rescue coroutine is not invoked");
#line 18
  testRunner.And("the result gets cancelled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The rescue coroutine for all errors is invoked when the results completes with an" +
            " error")]
        public virtual void TheRescueCoroutineForAllErrorsIsInvokedWhenTheResultsCompletesWithAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rescue coroutine for all errors is invoked when the results completes with an" +
                    " error", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("an arbitrary result which completes with an arbitrary error");
#line 22
  testRunner.And("I want to rescue all errors with a coroutine");
#line 23
 testRunner.When("the result is executed");
#line 24
 testRunner.Then("the rescue coroutine is invoked on the arbitrary exception");
#line 25
  testRunner.And("the result gets cancelled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The rescue coroutine for a specific error is invoked when the result completes wi" +
            "th the specific error")]
        public virtual void TheRescueCoroutineForASpecificErrorIsInvokedWhenTheResultCompletesWithTheSpecificError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rescue coroutine for a specific error is invoked when the result completes wi" +
                    "th the specific error", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("an arbitrary result which completes with an ArgumentException");
#line 29
  testRunner.And("I want to rescue ArgumentException errors with a coroutine");
#line 30
 testRunner.When("the result is executed");
#line 31
 testRunner.Then("the rescue coroutine is invoked on the ArgumentException");
#line 32
  testRunner.And("the result gets cancelled");
#line 33
  testRunner.And("the result completes without an error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The rescue coroutine for a specific error is not invoked when the result complete" +
            "s with another error")]
        public virtual void TheRescueCoroutineForASpecificErrorIsNotInvokedWhenTheResultCompletesWithAnotherError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rescue coroutine for a specific error is not invoked when the result complete" +
                    "s with another error", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("an arbitrary result which completes with an arbitrary error");
#line 37
  testRunner.And("I want to rescue ArgumentException errors with a coroutine");
#line 38
 testRunner.When("the result is executed");
#line 39
 testRunner.Then("the rescue coroutine is not invoked");
#line 40
  testRunner.And("the result does not get cancelled");
#line 41
  testRunner.And("the result completes with the arbitrary error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When a rescue coroutine is executed, the result completes with the same error as " +
            "the rescue coroutine")]
        public virtual void WhenARescueCoroutineIsExecutedTheResultCompletesWithTheSameErrorAsTheRescueCoroutine()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a rescue coroutine is executed, the result completes with the same error as " +
                    "the rescue coroutine", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("an arbitrary result which completes with an arbitrary error");
#line 45
  testRunner.And("I want to rescue all errors with a coroutine that completes with an error");
#line 46
 testRunner.When("the result is executed");
#line 47
 testRunner.Then("the result completes with the same error as the coroutine");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
